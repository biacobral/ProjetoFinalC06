package br.inatel.DAO;

import br.inatel.Model.Personagens.AntiFada;

import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;

public class AntiFadaDAO extends ConnectionDao {
    // AntiFadaDAO.java
    @Override
    public void connectToDb() {
        try {
            con = DriverManager.getConnection(url, user, password);
            System.out.println("‚öîÔ∏è Conex√£o estabelecida com sucesso! Anti-Fadas prontas para a batalha!");
        } catch (SQLException exc) {
            System.out.println("‚ùå Erro na conex√£o das Anti-Fadas: " + exc.getMessage());
        }
    }

    public boolean insertAntiFada(AntiFada antiFada) {
        connectToDb();
        String sql = "INSERT INTO AntiFada (nomeFada, tipoFada, Varinha_idSerial) VALUES (?, ?, ?)";

        try {
            pst = con.prepareStatement(sql);
            pst.setString(1, antiFada.getNomeFada());
            pst.setString(2, antiFada.getTipoFada());
            pst.setInt(3, antiFada.getVarinha_idSerial());

            pst.execute();
            System.out.println("‚öîÔ∏è Nova Anti-Fada registrada no ex√©rcito das trevas!");
            return true;

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao registrar Anti-Fada: " + exc.getMessage());
            return false;
        } finally {
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
    }

    // M√©todo UPDATE - Atualizar dados da Anti-Fada
    public boolean updateAntiFada(int id, AntiFada antiFada) {
        connectToDb();
        String sql = "UPDATE AntiFada SET nomeFada = ?, tipoFada = ?, Varinha_idSerial = ? WHERE id = ?";

        try {
            pst = con.prepareStatement(sql);
            pst.setString(1, antiFada.getNomeFada());
            pst.setString(2, antiFada.getTipoFada());
            pst.setInt(3, antiFada.getVarinha_idSerial());
            pst.setInt(4, id);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("‚ö° Anti-Fada " + antiFada.getNomeFada() + " teve seus poderes das trevas atualizados!");
                return true;
            } else {
                System.out.println("üîç Anti-Fada com ID " + id + " n√£o foi encontrada no ex√©rcito das trevas!");
                return false;
            }

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao atualizar poderes da Anti-Fada: " + exc.getMessage());
            return false;
        } finally {
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
    }

    // M√©todo UPDATE espec√≠fico - Atualizar apenas a varinha da Anti-Fada
    public boolean updateAntiFadaVarinha(int id, int novaVarinhaId) {
        connectToDb();
        String sql = "UPDATE AntiFada SET Varinha_idSerial = ? WHERE id = ?";

        try {
            pst = con.prepareStatement(sql);
            pst.setInt(1, novaVarinhaId);
            pst.setInt(2, id);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("ü™Ñ Anti-Fada equipou nova varinha das trevas! Poder aumentado!");
                return true;
            } else {
                System.out.println("üîç Anti-Fada com ID " + id + " n√£o foi encontrada para troca de varinha!");
                return false;
            }

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao equipar nova varinha na Anti-Fada: " + exc.getMessage());
            return false;
        } finally {
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
    }

    public boolean deleteAntiFada(String nomeFada) {
        connectToDb();
        String sql = "DELETE FROM AntiFada WHERE nomeFada = ?";

        try {
            pst = con.prepareStatement(sql);
            pst.setString(1, nomeFada);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("‚öîÔ∏è Anti-Fada " + nomeFada + " foi banida do ex√©rcito das trevas!");
                return true;
            } else {
                System.out.println("üîç Anti-Fada " + nomeFada + " n√£o foi encontrada no ex√©rcito!");
                return false;
            }

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao banir Anti-Fada: " + exc.getMessage());
            return false;
        } finally {
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
    }

    // Alternativa: DELETE por ID (caso voc√™ tenha um campo ID)
    public boolean deleteAntiFadaById(int id) {
        connectToDb();
        String sql = "DELETE FROM AntiFada WHERE id = ?";

        try {
            pst = con.prepareStatement(sql);
            pst.setInt(1, id);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("‚öîÔ∏è Anti-Fada com ID " + id + " foi banida do ex√©rcito das trevas!");
                return true;
            } else {
                System.out.println("üîç Anti-Fada com ID " + id + " n√£o foi encontrada no ex√©rcito!");
                return false;
            }

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao banir Anti-Fada: " + exc.getMessage());
            return false;
        } finally {
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
    }

    public ArrayList<AntiFada> selectAntiFada() {
        connectToDb();

        ArrayList<AntiFada> antiFadas = new ArrayList<>();
        String sql = "SELECT * FROM AntiFada";
        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);
            System.out.println("‚öîÔ∏è Listando ex√©rcito das Anti-Fadas:");
            while (rs.next()) {
                AntiFada antiFadaAux = new AntiFada(
                        rs.getString("nomeFada"),
                        rs.getString("tipoFada"),
                        rs.getInt("Varinha_idSerial")
                );
                System.out.println("üëπ Nome: " + antiFadaAux.getNomeFada() + " | Tipo: " + antiFadaAux.getTipoFada());
                System.out.println("--------------------");
                antiFadas.add(antiFadaAux);
            }
            System.out.println("‚öîÔ∏è Total de Anti-Fadas no ex√©rcito: " + antiFadas.size());
        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao consultar ex√©rcito das Anti-Fadas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
        return antiFadas;
    }

    // M√©todo SELECT - Buscar apenas os NOMES de todas as Anti-Fadas
    public ArrayList<String> selectAllNomesAntiFada() {
        connectToDb();

        ArrayList<String> nomes = new ArrayList<>();
        String sql = "SELECT nomeFada FROM AntiFada";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üìú Lista de nomes das Anti-Fadas:");
            while (rs.next()) {
                String nome = rs.getString("nomeFada");
                nomes.add(nome);
                System.out.println("üëπ " + nome);
            }
            System.out.println("‚öîÔ∏è Total de nomes listados: " + nomes.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao buscar nomes das Anti-Fadas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return nomes;
    }

    // M√©todo SELECT - Buscar apenas os TIPOS de todas as Anti-Fadas
    public ArrayList<String> selectAllTiposAntiFada() {
        connectToDb();

        ArrayList<String> tipos = new ArrayList<>();
        String sql = "SELECT tipoFada FROM AntiFada";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üåü Lista de tipos das Anti-Fadas:");
            while (rs.next()) {
                String tipo = rs.getString("tipoFada");
                tipos.add(tipo);
                System.out.println("üîÆ " + tipo);
            }
            System.out.println("‚öîÔ∏è Total de tipos listados: " + tipos.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao buscar tipos das Anti-Fadas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return tipos;
    }

    // M√©todo SELECT - Buscar apenas os IDs das VARINHAS de todas as Anti-Fadas
    public ArrayList<Integer> selectAllVarinhasAntiFada() {
        connectToDb();

        ArrayList<Integer> varinhas = new ArrayList<>();
        String sql = "SELECT Varinha_idSerial FROM AntiFada";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("ü™Ñ Lista de IDs das varinhas das Anti-Fadas:");
            while (rs.next()) {
                int varinhaId = rs.getInt("Varinha_idSerial");
                varinhas.add(varinhaId);
                System.out.println("‚ö° Varinha ID: " + varinhaId);
            }
            System.out.println("‚öîÔ∏è Total de varinhas listadas: " + varinhas.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao buscar IDs das varinhas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return varinhas;
    }

    // M√©todo SELECT - Buscar apenas os IDs de todas as Anti-Fadas (caso exista campo ID)
    public ArrayList<Integer> selectAllIdsAntiFada() {
        connectToDb();

        ArrayList<Integer> ids = new ArrayList<>();
        String sql = "SELECT id FROM AntiFada";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üÜî Lista de IDs das Anti-Fadas:");
            while (rs.next()) {
                int id = rs.getInt("id");
                ids.add(id);
                System.out.println("üî¢ ID: " + id);
            }
            System.out.println("‚öîÔ∏è Total de IDs listados: " + ids.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao buscar IDs das Anti-Fadas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return ids;
    }

    // M√©todo SELECT - Buscar tipos √öNICOS (sem repeti√ß√£o)
    public ArrayList<String> selectTiposUnicosAntiFada() {
        connectToDb();

        ArrayList<String> tiposUnicos = new ArrayList<>();
        String sql = "SELECT DISTINCT tipoFada FROM AntiFada";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üåü Tipos √∫nicos de Anti-Fadas no ex√©rcito:");
            while (rs.next()) {
                String tipo = rs.getString("tipoFada");
                tiposUnicos.add(tipo);
                System.out.println("üîÆ " + tipo);
            }
            System.out.println("‚öîÔ∏è Total de tipos √∫nicos: " + tiposUnicos.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("‚ùå Erro ao buscar tipos √∫nicos: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return tiposUnicos;
    }

    // M√©todo SELECT - Buscar apenas os NOMES de todas as Crian√ßas
    public ArrayList<String> selectAllNomesCrianca() {
        connectToDb();

        ArrayList<String> nomes = new ArrayList<>();
        String sql = "SELECT nomeCrianca FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üìã Lista de nomes das crian√ßas:");
            while (rs.next()) {
                String nome = rs.getString("nomeCrianca");
                nomes.add(nome);
                System.out.println("üë∂ " + nome);
            }
            System.out.println("üéâ Total de nomes listados: " + nomes.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar nomes das crian√ßas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return nomes;
    }

    // M√©todo SELECT - Buscar apenas as IDADES de todas as Crian√ßas
    public ArrayList<Integer> selectAllIdadesCrianca() {
        connectToDb();

        ArrayList<Integer> idades = new ArrayList<>();
        String sql = "SELECT idadeCrianca FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üéÇ Lista de idades das crian√ßas:");
            while (rs.next()) {
                int idade = rs.getInt("idadeCrianca");
                idades.add(idade);
                System.out.println("üéà " + idade + " anos");
            }
            System.out.println("üéâ Total de idades listadas: " + idades.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar idades das crian√ßas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return idades;
    }

    // M√©todo SELECT - Buscar apenas os SEXOS de todas as Crian√ßas
    public ArrayList<String> selectAllSexosCrianca() {
        connectToDb();

        ArrayList<String> sexos = new ArrayList<>();
        String sql = "SELECT sexoCrianca FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üë´ Lista de sexos das crian√ßas:");
            while (rs.next()) {
                String sexo = rs.getString("sexoCrianca");
                sexos.add(sexo);
                System.out.println("üöª " + sexo);
            }
            System.out.println("üéâ Total de sexos listados: " + sexos.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar sexos das crian√ßas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return sexos;
    }

    // M√©todo SELECT - Buscar apenas o STATUS DE PADRINHO de todas as Crian√ßas
    public ArrayList<Boolean> selectAllTemPadrinhoCrianca() {
        connectToDb();

        ArrayList<Boolean> temPadrinhos = new ArrayList<>();
        String sql = "SELECT temPadrinho FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üßö‚Äç‚ôÄÔ∏è Lista de status de padrinho das crian√ßas:");
            while (rs.next()) {
                boolean temPadrinho = rs.getBoolean("temPadrinho");
                temPadrinhos.add(temPadrinho);
                String status = temPadrinho ? "Tem padrinho ‚ú®" : "N√£o tem padrinho üíî";
                System.out.println("üßö " + status);
            }
            System.out.println("üéâ Total de status listados: " + temPadrinhos.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar status de padrinho: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return temPadrinhos;
    }

    // M√©todo SELECT - Buscar apenas os ENDERE√áOS de todas as Crian√ßas
    public ArrayList<String> selectAllEnderecosCrianca() {
        connectToDb();

        ArrayList<String> enderecos = new ArrayList<>();
        String sql = "SELECT enderecoCrianca FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üè† Lista de endere√ßos das crian√ßas:");
            while (rs.next()) {
                String endereco = rs.getString("enderecoCrianca");
                enderecos.add(endereco);
                System.out.println("üìç " + endereco);
            }
            System.out.println("üéâ Total de endere√ßos listados: " + enderecos.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar endere√ßos das crian√ßas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return enderecos;
    }

    // M√©todo SELECT - Buscar apenas os IDs de todas as Crian√ßas
    public ArrayList<Integer> selectAllIdsCrianca() {
        connectToDb();

        ArrayList<Integer> ids = new ArrayList<>();
        String sql = "SELECT idCrianca FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üÜî Lista de IDs das crian√ßas:");
            while (rs.next()) {
                int id = rs.getInt("idCrianca");
                ids.add(id);
                System.out.println("üî¢ ID: " + id);
            }
            System.out.println("üéâ Total de IDs listados: " + ids.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar IDs das crian√ßas: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return ids;
    }

    // M√©todo SELECT - Buscar SEXOS √öNICOS (sem repeti√ß√£o)
    public ArrayList<String> selectSexosUnicosCrianca() {
        connectToDb();

        ArrayList<String> sexosUnicos = new ArrayList<>();
        String sql = "SELECT DISTINCT sexoCrianca FROM Crianca";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üë´ Sexos √∫nicos no mundo das crian√ßas:");
            while (rs.next()) {
                String sexo = rs.getString("sexoCrianca");
                sexosUnicos.add(sexo);
                System.out.println("üöª " + sexo);
            }
            System.out.println("üéâ Total de sexos √∫nicos: " + sexosUnicos.size());
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao buscar sexos √∫nicos: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }

        return sexosUnicos;
    }

    // M√©todo SELECT - Contar crian√ßas com e sem padrinho
    public void contarCriancasPorPadrinho() {
        connectToDb();

        String sql = "SELECT temPadrinho, COUNT(*) as quantidade FROM Crianca GROUP BY temPadrinho";

        try {
            st = con.createStatement();
            rs = st.executeQuery(sql);

            System.out.println("üìä Estat√≠sticas de padrinhos:");
            while (rs.next()) {
                boolean temPadrinho = rs.getBoolean("temPadrinho");
                int quantidade = rs.getInt("quantidade");

                String status = temPadrinho ? "Com padrinho ‚ú®" : "Sem padrinho üíî";
                System.out.println("üßö " + status + ": " + quantidade + " crian√ßas");
            }
            System.out.println("--------------------");

        } catch (SQLException exc) {
            System.out.println("üò¢ Erro ao contar crian√ßas por padrinho: " + exc.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            } catch (SQLException exc) {
                System.out.println("Erro ao fechar conex√£o: " + exc.getMessage());
            }
        }
    }
}